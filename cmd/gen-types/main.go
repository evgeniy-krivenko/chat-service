package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func main() {
	if len(os.Args) != 4 {
		log.Fatalf("invalid args count: %d", len(os.Args)-1)
	}

	pkg, types, out := os.Args[1], strings.Split(os.Args[2], ","), os.Args[3]
	if err := run(pkg, types, out); err != nil {
		log.Fatal(err)
	}

	p, _ := os.Getwd()
	fmt.Printf("%v generated\n", filepath.Join(p, out)) //nolint:forbidigo
}

func run(pkg string, types []string, outFile string) error {
	file, err := os.Create(outFile)
	if err != nil {
		panic(err)
	}

	writer := bufio.NewWriter(file)
	t, err := template.New("genTypes").Parse(codeForTemplate)
	if err != nil {
		return fmt.Errorf("parse template: %v", err)
	}

	err = t.Execute(writer, &struct {
		Package   string
		TypeNames []string
		LastIndex int
	}{
		Package:   pkg,
		TypeNames: types,
		LastIndex: len(types) - 1,
	})
	if err != nil {
		return fmt.Errorf("execute template: %v", err)
	}

	if err := writer.Flush(); err != nil {
		return fmt.Errorf("flush file: %v", err)
	}

	if err := file.Close(); err != nil {
		return fmt.Errorf("close file %v", err)
	}

	return nil
}

var codeForTemplate = `// Code generated by cmd/gen-types; DO NOT EDIT.

package {{ .Package }}

import (
	"errors"

	"github.com/google/uuid"
)

{{range $typeName := .TypeNames }}
type {{$typeName}} uuid.UUID

var {{$typeName}}Nil = {{$typeName}}(uuid.Nil)

func New{{$typeName}}() {{$typeName}} {
	return {{$typeName}}(uuid.New())
}

func (r {{$typeName}}) String() string {
	return uuid.UUID(r).String()
}

func (r {{$typeName}}) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *{{$typeName}}) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r {{$typeName}}) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *{{$typeName}}) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r {{$typeName}}) Validate() error {
	if r.IsZero() {
		return errors.New("zero {{$typeName}}")
	}
	return nil
}

func (r {{$typeName}}) Matches(x any) bool {
	v, ok := x.({{$typeName}})
	if !ok {
		return false
	}
	return r.String() == v.String() 
}

func (r {{$typeName}}) IsZero() bool {
	return r == {{$typeName}}Nil 
}
{{end}}
type Types interface {
	{{range $idx, $name := .TypeNames -}}
	{{$name}}{{if lt $idx $.LastIndex}} | {{end}} 
	{{- end}}
}

func Parse[T Types](s string) (T, error) {
	u, err := uuid.Parse(s)
	return T(u), err
}

func MustParse[T Types](s string) T {
	return T(uuid.MustParse(s))	
}

`
