// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package managerloginmocks is a generated GoMock package.
package managerloginmocks

import (
	context "context"
	reflect "reflect"

	keycloakclient "github.com/evgeniy-krivenko/chat-service/internal/clients/keycloak"
	types "github.com/evgeniy-krivenko/chat-service/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockauthClient is a mock of authClient interface.
type MockauthClient struct {
	ctrl     *gomock.Controller
	recorder *MockauthClientMockRecorder
}

// MockauthClientMockRecorder is the mock recorder for MockauthClient.
type MockauthClientMockRecorder struct {
	mock *MockauthClient
}

// NewMockauthClient creates a new mock instance.
func NewMockauthClient(ctrl *gomock.Controller) *MockauthClient {
	mock := &MockauthClient{ctrl: ctrl}
	mock.recorder = &MockauthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthClient) EXPECT() *MockauthClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockauthClient) Auth(ctx context.Context, username, password string) (*keycloakclient.RPT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, username, password)
	ret0, _ := ret[0].(*keycloakclient.RPT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockauthClientMockRecorder) Auth(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockauthClient)(nil).Auth), ctx, username, password)
}

// MockuserGetter is a mock of userGetter interface.
type MockuserGetter struct {
	ctrl     *gomock.Controller
	recorder *MockuserGetterMockRecorder
}

// MockuserGetterMockRecorder is the mock recorder for MockuserGetter.
type MockuserGetterMockRecorder struct {
	mock *MockuserGetter
}

// NewMockuserGetter creates a new mock instance.
func NewMockuserGetter(ctrl *gomock.Controller) *MockuserGetter {
	mock := &MockuserGetter{ctrl: ctrl}
	mock.recorder = &MockuserGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserGetter) EXPECT() *MockuserGetterMockRecorder {
	return m.recorder
}

// GetUserInfoFromToken mocks base method.
func (m *MockuserGetter) GetUserInfoFromToken(token string) (*keycloakclient.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoFromToken", token)
	ret0, _ := ret[0].(*keycloakclient.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoFromToken indicates an expected call of GetUserInfoFromToken.
func (mr *MockuserGetterMockRecorder) GetUserInfoFromToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoFromToken", reflect.TypeOf((*MockuserGetter)(nil).GetUserInfoFromToken), token)
}

// MockprofilesRepository is a mock of profilesRepository interface.
type MockprofilesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockprofilesRepositoryMockRecorder
}

// MockprofilesRepositoryMockRecorder is the mock recorder for MockprofilesRepository.
type MockprofilesRepositoryMockRecorder struct {
	mock *MockprofilesRepository
}

// NewMockprofilesRepository creates a new mock instance.
func NewMockprofilesRepository(ctrl *gomock.Controller) *MockprofilesRepository {
	mock := &MockprofilesRepository{ctrl: ctrl}
	mock.recorder = &MockprofilesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprofilesRepository) EXPECT() *MockprofilesRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockprofilesRepository) CreateOrUpdate(ctx context.Context, id types.UserID, firstName, lastName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, id, firstName, lastName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockprofilesRepositoryMockRecorder) CreateOrUpdate(ctx, id, firstName, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockprofilesRepository)(nil).CreateOrUpdate), ctx, id, firstName, lastName)
}
