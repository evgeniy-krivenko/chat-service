// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package managerschedulermocks is a generated GoMock package.
package managerschedulermocks

import (
	context "context"
	reflect "reflect"
	time "time"

	messagesrepo "github.com/evgeniy-krivenko/chat-service/internal/repositories/messages"
	problemsrepo "github.com/evgeniy-krivenko/chat-service/internal/repositories/problems"
	types "github.com/evgeniy-krivenko/chat-service/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockproblemsRepo is a mock of problemsRepo interface.
type MockproblemsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproblemsRepoMockRecorder
}

// MockproblemsRepoMockRecorder is the mock recorder for MockproblemsRepo.
type MockproblemsRepoMockRecorder struct {
	mock *MockproblemsRepo
}

// NewMockproblemsRepo creates a new mock instance.
func NewMockproblemsRepo(ctrl *gomock.Controller) *MockproblemsRepo {
	mock := &MockproblemsRepo{ctrl: ctrl}
	mock.recorder = &MockproblemsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemsRepo) EXPECT() *MockproblemsRepoMockRecorder {
	return m.recorder
}

// GetAvailableProblems mocks base method.
func (m *MockproblemsRepo) GetAvailableProblems(arg0 context.Context) ([]problemsrepo.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableProblems", arg0)
	ret0, _ := ret[0].([]problemsrepo.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableProblems indicates an expected call of GetAvailableProblems.
func (mr *MockproblemsRepoMockRecorder) GetAvailableProblems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableProblems", reflect.TypeOf((*MockproblemsRepo)(nil).GetAvailableProblems), arg0)
}

// GetProblemRequestID mocks base method.
func (m *MockproblemsRepo) GetProblemRequestID(ctx context.Context, problemID types.ProblemID) (types.RequestID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemRequestID", ctx, problemID)
	ret0, _ := ret[0].(types.RequestID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemRequestID indicates an expected call of GetProblemRequestID.
func (mr *MockproblemsRepoMockRecorder) GetProblemRequestID(ctx, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemRequestID", reflect.TypeOf((*MockproblemsRepo)(nil).GetProblemRequestID), ctx, problemID)
}

// SetManagerForProblem mocks base method.
func (m *MockproblemsRepo) SetManagerForProblem(ctx context.Context, problemID types.ProblemID, managerID types.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetManagerForProblem", ctx, problemID, managerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetManagerForProblem indicates an expected call of SetManagerForProblem.
func (mr *MockproblemsRepoMockRecorder) SetManagerForProblem(ctx, problemID, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetManagerForProblem", reflect.TypeOf((*MockproblemsRepo)(nil).SetManagerForProblem), ctx, problemID, managerID)
}

// MockmessageRepo is a mock of messageRepo interface.
type MockmessageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockmessageRepoMockRecorder
}

// MockmessageRepoMockRecorder is the mock recorder for MockmessageRepo.
type MockmessageRepoMockRecorder struct {
	mock *MockmessageRepo
}

// NewMockmessageRepo creates a new mock instance.
func NewMockmessageRepo(ctrl *gomock.Controller) *MockmessageRepo {
	mock := &MockmessageRepo{ctrl: ctrl}
	mock.recorder = &MockmessageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageRepo) EXPECT() *MockmessageRepoMockRecorder {
	return m.recorder
}

// CreateClientService mocks base method.
func (m *MockmessageRepo) CreateClientService(ctx context.Context, problemID types.ProblemID, chatID types.ChatID, msgBody string) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientService", ctx, problemID, chatID, msgBody)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientService indicates an expected call of CreateClientService.
func (mr *MockmessageRepoMockRecorder) CreateClientService(ctx, problemID, chatID, msgBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientService", reflect.TypeOf((*MockmessageRepo)(nil).CreateClientService), ctx, problemID, chatID, msgBody)
}

// MockoutboxService is a mock of outboxService interface.
type MockoutboxService struct {
	ctrl     *gomock.Controller
	recorder *MockoutboxServiceMockRecorder
}

// MockoutboxServiceMockRecorder is the mock recorder for MockoutboxService.
type MockoutboxServiceMockRecorder struct {
	mock *MockoutboxService
}

// NewMockoutboxService creates a new mock instance.
func NewMockoutboxService(ctrl *gomock.Controller) *MockoutboxService {
	mock := &MockoutboxService{ctrl: ctrl}
	mock.recorder = &MockoutboxServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoutboxService) EXPECT() *MockoutboxServiceMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockoutboxService) Put(ctx context.Context, name, payload string, availableAt time.Time) (types.JobID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, name, payload, availableAt)
	ret0, _ := ret[0].(types.JobID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockoutboxServiceMockRecorder) Put(ctx, name, payload, availableAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockoutboxService)(nil).Put), ctx, name, payload, availableAt)
}

// Mocktransactor is a mock of transactor interface.
type Mocktransactor struct {
	ctrl     *gomock.Controller
	recorder *MocktransactorMockRecorder
}

// MocktransactorMockRecorder is the mock recorder for Mocktransactor.
type MocktransactorMockRecorder struct {
	mock *Mocktransactor
}

// NewMocktransactor creates a new mock instance.
func NewMocktransactor(ctrl *gomock.Controller) *Mocktransactor {
	mock := &Mocktransactor{ctrl: ctrl}
	mock.recorder = &MocktransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransactor) EXPECT() *MocktransactorMockRecorder {
	return m.recorder
}

// RunInTx mocks base method.
func (m *Mocktransactor) RunInTx(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MocktransactorMockRecorder) RunInTx(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*Mocktransactor)(nil).RunInTx), ctx, f)
}
