// Code generated by ent, DO NOT EDIT.

package problem

import (
	"time"

	"github.com/evgeniy-krivenko/chat-service/internal/types"
)

const (
	// Label holds the string label denoting the problem type in the database.
	Label = "problem"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChatID holds the string denoting the chat_id field in the database.
	FieldChatID = "chat_id"
	// FieldManagerID holds the string denoting the manager_id field in the database.
	FieldManagerID = "manager_id"
	// FieldResolvedAt holds the string denoting the resolved_at field in the database.
	FieldResolvedAt = "resolved_at"
	// FieldResolveRequestID holds the string denoting the resolve_request_id field in the database.
	FieldResolveRequestID = "resolve_request_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeChat holds the string denoting the chat edge name in mutations.
	EdgeChat = "chat"
	// Table holds the table name of the problem in the database.
	Table = "problems"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "problem_id"
	// ChatTable is the table that holds the chat relation/edge.
	ChatTable = "problems"
	// ChatInverseTable is the table name for the Chat entity.
	// It exists in this package in order to avoid circular dependency with the "chat" package.
	ChatInverseTable = "chats"
	// ChatColumn is the table column denoting the chat relation/edge.
	ChatColumn = "chat_id"
)

// Columns holds all SQL columns for problem fields.
var Columns = []string{
	FieldID,
	FieldChatID,
	FieldManagerID,
	FieldResolvedAt,
	FieldResolveRequestID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() types.ProblemID
)
