// Package clientv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230513000919-14548c7e7bbe DO NOT EDIT.
package clientv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/evgeniy-krivenko/chat-service/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeCreateChatError    ErrorCode = 1000
	ErrorCodeCreateProblemError ErrorCode = 1001
)

// Error defines model for Error.
type Error struct {
	// Code contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
	Code    ErrorCode `json:"code"`
	Details *string   `json:"details,omitempty"`
	Message string    `json:"message"`
}

// ErrorCode contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
type ErrorCode int

// GetHistoryRequest defines model for GetHistoryRequest.
type GetHistoryRequest struct {
	Cursor   *string `json:"cursor,omitempty"`
	PageSize *int    `json:"pageSize,omitempty"`
}

// GetHistoryResponse defines model for GetHistoryResponse.
type GetHistoryResponse struct {
	Data  *MessagesPage `json:"data,omitempty"`
	Error *Error        `json:"error,omitempty"`
}

// GetUserProfileResponse defines model for GetUserProfileResponse.
type GetUserProfileResponse struct {
	Data  *UserProfile `json:"data,omitempty"`
	Error *Error       `json:"error,omitempty"`
}

// LoginInfo defines model for LoginInfo.
type LoginInfo struct {
	Token string      `json:"token"`
	User  UserProfile `json:"user"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Data  *LoginInfo `json:"data,omitempty"`
	Error *Error     `json:"error,omitempty"`
}

// Message defines model for Message.
type Message struct {
	AuthorId   *types.UserID   `json:"authorId,omitempty"`
	Body       string          `json:"body"`
	CreatedAt  time.Time       `json:"createdAt"`
	Id         types.MessageID `json:"id"`
	IsBlocked  bool            `json:"isBlocked"`
	IsReceived bool            `json:"isReceived"`
	IsService  bool            `json:"isService"`
}

// MessageHeader defines model for MessageHeader.
type MessageHeader struct {
	AuthorId  *types.UserID   `json:"authorId,omitempty"`
	CreatedAt time.Time       `json:"createdAt"`
	Id        types.MessageID `json:"id"`
}

// MessagesPage defines model for MessagesPage.
type MessagesPage struct {
	Messages []Message `json:"messages"`
	Next     string    `json:"next"`
}

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	MessageBody string `json:"messageBody"`
}

// SendMessageResponse defines model for SendMessageResponse.
type SendMessageResponse struct {
	Data  *MessageHeader `json:"data,omitempty"`
	Error *Error         `json:"error,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	FirstName string       `json:"firstName"`
	Id        types.UserID `json:"id"`
	LastName  string       `json:"lastName"`
}

// XRequestIDHeader defines model for XRequestIDHeader.
type XRequestIDHeader = types.RequestID

// PostGetHistoryParams defines parameters for PostGetHistory.
type PostGetHistoryParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetUserProfileParams defines parameters for PostGetUserProfile.
type PostGetUserProfileParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostSendMessageParams defines parameters for PostSendMessage.
type PostSendMessageParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetHistoryJSONRequestBody defines body for PostGetHistory for application/json ContentType.
type PostGetHistoryJSONRequestBody = GetHistoryRequest

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PostSendMessageJSONRequestBody defines body for PostSendMessage for application/json ContentType.
type PostSendMessageJSONRequestBody = SendMessageRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /getHistory)
	PostGetHistory(ctx echo.Context, params PostGetHistoryParams) error

	// (POST /getUserProfile)
	PostGetUserProfile(ctx echo.Context, params PostGetUserProfileParams) error

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (POST /sendMessage)
	PostSendMessage(ctx echo.Context, params PostSendMessageParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostGetHistory converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetHistory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetHistoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetHistory(ctx, params)
	return err
}

// PostGetUserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetUserProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetUserProfileParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetUserProfile(ctx, params)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostSendMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostSendMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSendMessageParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSendMessage(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/getHistory", wrapper.PostGetHistory)
	router.POST(baseURL+"/getUserProfile", wrapper.PostGetUserProfile)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/sendMessage", wrapper.PostSendMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX32/bNhD+VwhuDxsgW3K7h0LAHtp0azKkm1GnWIHMD7R0trhIpEqenHiB/vfhKNqS",
	"bHlJ07jYky3+OH733fHu4z1PdFFqBQotj+95KYwoAMG4r08f4HMFFi/enoNIwdCYVDzmWfMZcCUK4DH/",
	"NPIrRxdvecANfK6kgZTHaCoIuE0yKATtXmpTCOQxryqZ8oDjpqT9Fo1UKx7wu9FKj/wg/djxDkJ3diSL",
	"UhtsEGPGY76SmFWLcaKLENYrUHIzujFyDepGh0kmcGTBrGUCoVQIRok8dOZ5Xdf1FqDz+RdjtHO0NLoE",
	"gxLccKJToN/vDSx5zL8LW95Cvzt0W89oYR3wFFDI3O3tO1kHvABrxQoG5uouede7hUFz/rwOeHtIfM9T",
	"sImRJUpNUUm0QiGVZedXV1MGtJDRPsuESpktIZFLmbBFZaUCa1muVzLprfsBM2C5sMiKyiJbAPuriqKX",
	"8DObRFH045gHHFRV8PiavoNJFE3mAS+kkgWN/hRFu5ASzyuXI3cj2jNaC0PZYsmvnRNnBgTCWSaw4T3Y",
	"n5oavcihaGbJ/3eA59KiNhufGQOxqoxtYnjAfClWMJP/OPIKcdfAnhDsnROTQx9cjnQPtqVWFg5PTgWK",
	"h7LkfRNTO6XA1gGHbcI9mFo7HB8tmKnRS5nD12HpGHoKlEu9kupCLfXh6ahvQA2GoLJgvgjX3p1oLHs7",
	"8y2Ko8lASa6O5IK1t9qkD1/DxkZnR+fYr6G/5e8J5L9vi4jI8z+WPL5+VOL5Ul4H+4gXOt0MEiXtm1wn",
	"N9BlaqF1DkI10x8gAbk+Pj9rau/Q9B7TDkPPZPf4rq15PW9JaNtT3yVRYabNRfq01kNZeLq+E/DEVbj0",
	"NfbgpQJhhLKAA4zE5RNd8TydsIv24+hgtf51QtXUvYNI+U7n/kuEwj6yjBIp3lNhjNjQt4I7fHRvtdxv",
	"IIwzUKk3fLSg+H1v/G0pxN0lqBXR9yLyjWQ7MAkeh8HZOjj/GZrM7q5/cXXpVuADBEtpLP7upN/98+Xo",
	"qa8b6ZojoIeyt3Wys3Xu1CIklZG4mRFtvnaCMGBeVwRy+/XrloHf/rziXmO62udmW0oyxLIhXfpWihKJ",
	"dv5GqBs2q0oigZFIYme5BIXs9fSCB3wNxjbKbz0h4nUJSpSSx/zlOBq/dA0LM4cvXO3Ui2NTN5nd14/v",
	"ABmRyLJmJck9CrugeSqifKottjrIHdC+F460n3ZJePCeqOcN8WBxe59IxIJy6ERZ5jJxp4d/W+26ePuU",
	"+K9EPhSJexWK3iVuoLlkjqMXUXQSAP4eOwR9wrclkeXS4ti/RShU+7fvaLhIBDGXNkdC1bX0TOE6HWVD",
	"unaAto87pz1jO403TJSbZrcSM8cXvULci2gn54a4u/Sa7xTp2VOs3zgz+7J1gN1ZlSTb12Ej0Lb1jsfX",
	"rv6Ftm1Tx1mnXsYU3DLf5BhqRs9LqjDDlaXT/f6/pWVAInzjCA6JhOPFhXkV1pSXfjT7fet6TpxRA91y",
	"3jf4FtaQ67KgBtSsoleYyX0Li8Mw14nIM20xfhW9ikLqSvP63wAAAP//FA8CrGMSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
