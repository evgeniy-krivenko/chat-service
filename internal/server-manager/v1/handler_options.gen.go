// Code generated by options-gen. DO NOT EDIT.
package managerv1

import (
	fmt461e464ebed9 "fmt"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	canReceiveProblemUseCase canReceiveProblemsUseCase,
	freeHandsUseCase freeHandsUseCase,
	getChatsUseCase getChatsUseCase,
	getChatHistoryUseCase getChatHistoryUseCase,
	sendMessageUseCase sendMessageUseCase,
	closeChatUseCase closeChatUseCase,
	loginUseCase loginUseCase,
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)

	o.canReceiveProblemUseCase = canReceiveProblemUseCase
	o.freeHandsUseCase = freeHandsUseCase
	o.getChatsUseCase = getChatsUseCase
	o.getChatHistoryUseCase = getChatHistoryUseCase
	o.sendMessageUseCase = sendMessageUseCase
	o.closeChatUseCase = closeChatUseCase
	o.loginUseCase = loginUseCase

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("canReceiveProblemUseCase", _validate_Options_canReceiveProblemUseCase(o)))
	errs.Add(errors461e464ebed9.NewValidationError("freeHandsUseCase", _validate_Options_freeHandsUseCase(o)))
	errs.Add(errors461e464ebed9.NewValidationError("getChatsUseCase", _validate_Options_getChatsUseCase(o)))
	errs.Add(errors461e464ebed9.NewValidationError("getChatHistoryUseCase", _validate_Options_getChatHistoryUseCase(o)))
	errs.Add(errors461e464ebed9.NewValidationError("sendMessageUseCase", _validate_Options_sendMessageUseCase(o)))
	errs.Add(errors461e464ebed9.NewValidationError("closeChatUseCase", _validate_Options_closeChatUseCase(o)))
	errs.Add(errors461e464ebed9.NewValidationError("loginUseCase", _validate_Options_loginUseCase(o)))
	return errs.AsError()
}

func _validate_Options_canReceiveProblemUseCase(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.canReceiveProblemUseCase, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `canReceiveProblemUseCase` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_freeHandsUseCase(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.freeHandsUseCase, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `freeHandsUseCase` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_getChatsUseCase(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.getChatsUseCase, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `getChatsUseCase` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_getChatHistoryUseCase(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.getChatHistoryUseCase, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `getChatHistoryUseCase` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_sendMessageUseCase(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.sendMessageUseCase, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `sendMessageUseCase` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_closeChatUseCase(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.closeChatUseCase, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `closeChatUseCase` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_loginUseCase(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.loginUseCase, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `loginUseCase` did not pass the test: %w", err)
	}
	return nil
}
