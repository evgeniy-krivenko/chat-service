# https://taskfile.dev
version: '3'

silent: true

vars:
  GO_MODULE: github.com/evgeniy-krivenko/chat-service
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.52.2
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/Library/Caches/golangci-lint"

  DEV_TOOLS: |
    github.com/daixiang0/gci@v0.8.0
    mvdan.cc/gofumpt@v0.4.0
    github.com/kazhuravlev/options-gen/cmd/options-gen@v0.28.4
    entgo.io/ent/cmd/ent@v0.11.10
    github.com/deepmap/oapi-codegen/cmd/oapi-codegen@master
    github.com/golang/mock/mockgen@v1.6.0
    github.com/onsi/ginkgo/v2/ginkgo@v2.9.2
    github.com/moznion/gonstructor/cmd/gonstructor@v0.5.0

  WORKDIR:
    sh: echo "$(pwd)"

  DEV_TOOLS_PATH: /tools/bin

  DOCKER_COMPOSE_PATHS: |
    ./deploy/local/docker-compose.yml
    ./deploy/local/docker-compose.sentry.yml
    ./deploy/local/docker-compose.swagger-ui.yml

  DOCKER_COMPOSE_CMD: docker compose -f {{ .DOCKER_COMPOSE_PATHS | trim | splitLines | join " -f " }}

  # if it will be decided generate key with every deps running
  SENTRY_SECRET_KEY_DEPS: |
    {{if eq $.COMPOSE_PROFILES "sentry"}} `docker run --platform linux/amd64 --rm sentry config generate-secret-key` {{end}}

  TYPES: |
    ChatID
    EventID
    FailedJobID
    JobID
    MessageID
    ProblemID
    RequestID
    UserID

  TYPES_PKG: types
  TYPES_SRC: ./internal/types
  TYPES_DST: ./internal/types/types.gen.go

  SCHEMA_PATH: ./internal/store/schema

  # const for server code gen
  CLIENT_V1_SRC: ./api/client.v1.swagger.yml
  CLIENT_V1_DST: ./internal/server-client/v1/server.gen.go
  CLIENT_V1_PKG: clientv1

  MANAGER_V1_SRC: ./api/manager.v1.swagger.yml
  MANAGER_V1_DST: ./internal/server-manager/v1/server.gen.go
  MANAGER_V1_PKG: managerv1

  CLIENT_EVENTS_SRC: ./api/client.events.swagger.yml
  CLIENT_EVENTS_DST: ./internal/server-client/events/events.gen.go
  CLIENT_EVENTS_PKG: clientevents

  MANAGER_EVENTS_SRC: ./api/manager.events.swagger.yml
  MANAGER_EVENTS_DST: ./internal/server-manager/events/events.gen.go
  MANAGER_EVENTS_PKG: managerevents

  # const for e2e-client code gen
  E2E_CLIENT_V1_DST: ./tests/e2e/api/client/v1/client.gen.go
  E2E_CLIENT_V1_PKG: apiclientv1

  E2E_CLIENT_EVENTS_PKG: apiclientevents
  E2E_CLIENT_EVENTS_DST: ./tests/e2e/api/client/events/events.gen.go

  E2E_MANAGER_V1_DST: ./tests/e2e/api/manager/v1/client.gen.go
  E2E_MANAGER_V1_PKG: apimanagerv1

  E2E_MANAGER_EVENTS_DST: ./tests/e2e/api/manager/events/events.gen.go
  E2E_MANAGER_EVENTS_PKG: apimanagerevents

tasks:
  default:
    # Последовательно выполняем таски tidy, fmt, lint, tests и build
    cmds:
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  gen:client:
    cmds:
      - echo "Generate client spec..."
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen --old-config-style -package {{.CLIENT_V1_PKG}} -generate types,server,spec {{.CLIENT_V1_SRC}} > {{.CLIENT_V1_DST}}
    sources:
      - "{{.CLIENT_V1_SRC}}"
    generates:
      - "{{.CLIENT_V1_DST}}"

  gen:manager:
    cmds:
      - echo "Generate manager spec..."
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen --old-config-style -package {{.MANAGER_V1_PKG}} -generate types,server,spec {{.MANAGER_V1_SRC}} > {{.MANAGER_V1_DST}}
    sources:
      - "{{.MANAGER_V1_SRC}}"
    generates:
      - "{{.MANAGER_V1_DST}}"

  gen:client-events:
    cmds:
      - echo "Generate events spec..."
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen --old-config-style -package {{.CLIENT_EVENTS_PKG}} -generate skip-prune,types,spec {{.CLIENT_EVENTS_SRC}} > {{.CLIENT_EVENTS_DST}}

  gen:manager-events:
    cmds:
      - echo "Generate events spec..."
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen --old-config-style -package {{.MANAGER_EVENTS_PKG}} -generate skip-prune,types,spec {{.MANAGER_EVENTS_SRC}} > {{.MANAGER_EVENTS_DST}}

  gen:api:
    cmds:
      - task: gen:client
      - task: gen:manager
      - task: gen:client-events
      - task: gen:manager-events
      - task: tidy

  gen:e2e:
    cmds:
      - echo "[E2E] Generate client API.."
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen --old-config-style -package {{.E2E_CLIENT_V1_PKG}} -generate types,client {{.CLIENT_V1_SRC}} > {{.E2E_CLIENT_V1_DST}}
      - echo "[E2E] Generate client events..."
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen --old-config-style -generate skip-prune,types -package {{.E2E_CLIENT_EVENTS_PKG}} {{.CLIENT_EVENTS_SRC}} > {{.E2E_CLIENT_EVENTS_DST}}
      - echo "[E2E] Generate manager API..."
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen --old-config-style -generate types,client -package {{.E2E_MANAGER_V1_PKG}} {{.MANAGER_V1_SRC}} > {{.E2E_MANAGER_V1_DST}}
      - echo "[E2E] Generate manager events..."
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen --old-config-style -generate skip-prune,types -package {{.E2E_MANAGER_EVENTS_PKG}} {{.MANAGER_EVENTS_SRC}} > {{.E2E_MANAGER_EVENTS_DST}}
    sources:
      - "{{.CLIENT_V1_SRC}}"
      - "{{.CLIENT_EVENTS_SRC}}"
    generates:
      - "{{.E2E_CLIENT_V1_DST}}"
      - "{{.E2E_CLIENT_EVENTS_DST}}"

  gen:types:
    cmds:
      - echo "Generate types..."
      - go run ./cmd/gen-types {{.TYPES_PKG}} {{ .TYPES | trim | splitLines | join "," }} {{.TYPES_DST}}
      - task: tidy
    sources:
      - "{{.TYPES_SRC}}/*.go"
    generates:
      - "{{.TYPES_DST}}"

  ent:gen:
    cmds:
      - echo "Generate ent..."
      - .{{.DEV_TOOLS_PATH}}/ent generate {{.SCHEMA_PATH}} --feature sql/upsert,sql/lock,sql/execquery --template ./internal/store/templates
      - task: tidy
    sources:
      - "{{.SCHEMA_PATH}}/*.go"
      - ./internal/store/templates
    generates:
      - ./internal/store/*.go

  ent:new:
    cmds:
      - .{{.DEV_TOOLS_PATH}}/ent new --target {{.SCHEMA_PATH}} {{.CLI_ARGS}}
      - task: tidy

  generate:
    cmds:
      - echo "Run go generate..."
      - export PATH=$PATH:{{.WORKDIR}}{{.DEV_TOOLS_PATH}} && go generate ./...
      - task: gen:api
      - task: gen:e2e
      - task: ent:gen
      - task: tidy

  tidy:
    run: once
    cmds:
      - echo "- Tidy"
      - go mod tidy
      - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    - echo "- Format"
    - .{{.DEV_TOOLS_PATH}}/gofumpt -w  {{.GO_FILES}}
    - .{{.DEV_TOOLS_PATH}}/gci write -s standard -s default -s "prefix({{.GO_MODULE}})" {{.GO_FILES}}

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: {CLI_ARGS: "run -v --fix --timeout=5m ./..."}

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          golangci/golangci-lint:{{.GOLANGCI_LINT_VERSION}} \
          golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - go test -race ./... {{.CLI_ARGS}}

  tests:integration:
    dotenv:
      - .env
    cmds:
      - echo "- Integration tests"
      - go test -tags integration -count 1 -race ./...

  tests:e2e:
    dotenv:
      - .env
    cmds:
      - echo "- End-to-end tests..."
       # NOTE: It's important to run tests serial (without `-p` flag) – for correct `clientsPool` sharing.
      - .{{.DEV_TOOLS_PATH}}/ginkgo --fail-fast --timeout=1m --tags e2e {{.CLI_ARGS}} ./tests/e2e

  build:
    cmds:
      - echo "- Build"
      - go build ./cmd/chat-service

  dev-tools:install:
    cmds:
      - echo "- Install dev tools"
      - mkdir -p .{{.DEV_TOOLS_PATH}}
      - |
        {{range $tool := .DEV_TOOLS | trim | splitLines -}}
          GOBIN={{$.WORKDIR}}{{$.DEV_TOOLS_PATH}} go install {{$tool}}
        {{end -}}
        
  deps:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} up -d"

  deps:cmd:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.CLI_ARGS}}"

  deps:status:
    env:
      # for seeing containers status without throwing env
      COMPOSE_PROFILES: sentry
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} ps"

  deps:logs:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} logs {{.CLI_ARGS}}"

  deps:stop:
    cmds:
      - task: kc:export
      - "{{.DOCKER_COMPOSE_CMD}} stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:reset:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.SERVICE}}"

  kc:export:
    cmds:
      - echo "Dump Keycloak Bank realm..."
      - "{{.DOCKER_COMPOSE_CMD}} exec keycloak /opt/keycloak/bin/kc.sh export --file /tmp/keycloak-export/bank-realm.json --realm Bank"
