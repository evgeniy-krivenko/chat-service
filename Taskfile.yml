# https://taskfile.dev
version: '3'

silent: true

vars:
  GO_MODULE: github.com/evgeniy-krivenko/chat-service
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.52.2
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/Library/Caches/golangci-lint"

  DEV_TOOLS: |
    github.com/daixiang0/gci@v0.8.0
    mvdan.cc/gofumpt@v0.4.0
    github.com/kazhuravlev/options-gen/cmd/options-gen@v0.28.4
    entgo.io/ent/cmd/ent@v0.11.10
    github.com/deepmap/oapi-codegen/cmd/oapi-codegen@v1.12.4
    github.com/golang/mock/mockgen@v1.6.0

  WORKDIR:
    sh: echo "$(pwd)"

  DEV_TOOLS_PATH: /tools/bin

  DOCKER_COMPOSE_PATHS: |
    ./deploy/local/docker-compose.yml
    ./deploy/local/docker-compose.sentry.yml
    ./deploy/local/docker-compose.swagger-ui.yml

  # if it will be decided generate key with every deps running
  SENTRY_SECRET_KEY_DEPS: |
    {{if eq $.COMPOSE_PROFILES "sentry"}} `docker run --platform linux/amd64 --rm sentry config generate-secret-key` {{end}}

  DOCKER_FILES: |
    {{range $file := .DOCKER_COMPOSE_PATHS | trim | splitLines -}}
      \-f {{$file}} \
    {{end -}}

  DOCKER_COMPOSE_CMD: docker compose

  TYPES: |
    ChatID
    MessageID
    ProblemID
    UserID
    RequestID

  TYPES_PKG: types
  TYPES_DST: ./internal/types/types.gen.go

  SCHEMA_PATH: ./internal/store/schema

  CLIENT_V1_SRC: ./api/client.v1.swagger.yml
  CLIENT_V1_DST: ./internal/server-client/v1/server.gen.go
  CLIENT_V1_PKG: clientv1

  # swagger urls in docker container
  SWAGGER_DOCS_URLS: |
    { url: 'doc/client.v1.swagger.yml', name: 'ClientV1' }
    

tasks:
  default:
    # Последовательно выполняем таски tidy, fmt, lint, tests и build
    cmds:
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build

  gen:api:
    cmds:
      - .{{.DEV_TOOLS_PATH}}/oapi-codegen -old-config-style -package {{.CLIENT_V1_PKG}} -generate types,server,spec {{.CLIENT_V1_SRC}} > {{.CLIENT_V1_DST}}

  gen:types:
    cmds:
      - echo "Generate types..."
      - |
        go run ./cmd/gen-types {{.TYPES_PKG}} \
        {{range $index, $type := .TYPES | trim | splitLines -}}
        {{if $index}},{{- end -}}
        {{$type -}}
        {{end}} \
        {{.TYPES_DST}}
      - task: tidy

  ent:gen:
    cmds:
      - .{{.DEV_TOOLS_PATH}}/ent generate {{.SCHEMA_PATH}} --template ./internal/store/templates
      - task: tidy

  ent:new:
    cmds:
      - .{{.DEV_TOOLS_PATH}}/ent new --target {{.SCHEMA_PATH}} {{.CLI_ARGS}}
      - task: tidy

  generate:
    cmds:
      - echo "Run go generate..."
      - export PATH=$PATH:{{.WORKDIR}}{{.DEV_TOOLS_PATH}} && go generate ./...
      - task: tidy

  tidy:
    - echo "- Tidy"
    - go mod tidy
    - task: vendor

  vendor:
    - echo "- Vendor"
    - go mod vendor

  fmt:
    - echo "- Format"
    - .{{.DEV_TOOLS_PATH}}/gofumpt -w  {{.GO_FILES}}
    - .{{.DEV_TOOLS_PATH}}/gci write -s standard -s default -s "prefix({{.GO_MODULE}})" {{.GO_FILES}}

  lint:
    cmds:
      - echo "- Lint"
      - mkdir -p {{.GOLANGCI_LINT_CACHE}}
      - task: lint:cmd
        vars: {CLI_ARGS: "run -v --fix --timeout=5m ./..."}

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          golangci/golangci-lint:{{.GOLANGCI_LINT_VERSION}} \
          golangci-lint {{.CLI_ARGS}}

  tests:
    cmds:
      - echo "- Tests"
      - go test -v -race ./... {{.CLI_ARGS}}

  tests:integration:
    env:
      TEST_LOG_LEVEL: info
      TEST_KEYCLOAK_REALM: Bank
      TEST_KEYCLOAK_CLIENT_ID: integration-testing
      TEST_KEYCLOAK_CLIENT_SECRET: 9RoNZ7i2xSAUeKPcht4aPFslZycfvK9I
      TEST_KEYCLOAK_TEST_USER: integration-testing
      TEST_KEYCLOAK_TEST_PASSWORD: 123456
      TEST_PSQL_USER: chat-service
      TEST_PSQL_PASSWORD: chat-service
      TEST_PSQL_DEBUG: true
    cmds:
      - echo "- Integration tests"
      - go test -tags integration -count 1 -race ./...

  build:
    cmds:
      - echo "- Build"
      - go build ./cmd/chat-service

  dev-tools:install:
    cmds:
      - echo "- Install dev tools"
      - mkdir -p .{{.DEV_TOOLS_PATH}}
      - |
        {{range $tool := .DEV_TOOLS | trim | splitLines -}}
          GOBIN={{$.WORKDIR}}{{$.DEV_TOOLS_PATH}} go install {{$tool}}
        {{end -}}
        
  deps:
    env:
      SWAGGER_URLS: |
        "[{{range $index, $url := .SWAGGER_DOCS_URLS | trim | splitLines -}}
        {{if $index}},{{- end -}}
        {{$url}}
        {{- end}}]"
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_FILES}} up -d"

  deps:cmd:
    env:
      # for seeing containers status without throwing env
      COMPOSE_PROFILES: sentry
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_FILES}} {{.CLI_ARGS}}"

  deps:status:
    env:
      # for seeing containers status without throwing env
      COMPOSE_PROFILES: sentry
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_FILES}} ps"

  deps:logs:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_FILES}} logs {{.CLI_ARGS}}"

  deps:stop:
    cmds:
      - task: kc:export
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_FILES}} stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICE: postgres

  deps:reset:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_FILES}} rm -fsv {{.SERVICE}}"
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_FILES}} up -d {{.SERVICE}}"

  kc:export:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.DOCKER_FILES}} exec keycloak /opt/keycloak/bin/kc.sh export --file /tmp/keycloak-export/bank-realm.json --realm Bank"
